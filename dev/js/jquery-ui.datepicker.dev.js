/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/jquery-ui.datepicker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/jquery-ui.datepicker.js":
/*!****************************************!*\
  !*** ./src/js/jquery-ui.datepicker.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function ($, undefined) {\r\n\r\n    $.extend($.ui, { datepicker: { version: \"1.9.0\" } });\r\n\r\n    var PROP_NAME = 'datepicker';\r\n    var dpuuid = new Date().getTime();\r\n    var instActive;\r\n\r\n    /* Date picker manager.\r\n       Use the singleton instance of this class, $.datepicker, to interact with the date picker.\r\n       Settings for (groups of) date pickers are maintained in an instance object,\r\n       allowing multiple different settings on the same page. */\r\n\r\n    function Datepicker() {\r\n        this.debug = false; // Change this to true to start debugging\r\n        this._curInst = null; // The current instance in use\r\n        this._keyEvent = false; // If the last event was a key event\r\n        this._disabledInputs = []; // List of date picker inputs that have been disabled\r\n        this._datepickerShowing = false; // True if the popup picker is showing , false if not\r\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\r\n        this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division\r\n        this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class\r\n        this._appendClass = 'ui-datepicker-append'; // The name of the append marker class\r\n        this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class\r\n        this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class\r\n        this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class\r\n        this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class\r\n        this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class\r\n        this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class\r\n        this.regional = []; // Available regional settings, indexed by language code\r\n        this.regional[''] = { // Default regional settings\r\n            closeText: 'Done', // Display text for close link\r\n            prevText: 'Prev', // Display text for previous month link\r\n            nextText: 'Next', // Display text for next month link\r\n            currentText: 'Today', // Display text for current month link\r\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n                'July', 'August', 'September', 'October', 'November', 'December'], // Names of months for drop-down and formatting\r\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting\r\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting\r\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting\r\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'], // Column headings for days starting at Sunday\r\n            weekHeader: 'Wk', // Column header for week of the year\r\n            dateFormat: 'mm/dd/yy', // See format options on parseDate\r\n            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...\r\n            isRTL: false, // True if right-to-left language, false if left-to-right\r\n            showMonthAfterYear: false, // True if the year select precedes month, false for month then year\r\n            yearSuffix: '' // Additional text to append to the year in the month headers\r\n        };\r\n        this._defaults = { // Global defaults for all the date picker instances\r\n            showOn: 'focus', // 'focus' for popup on focus,\r\n            // 'button' for trigger button, or 'both' for either\r\n            showAnim: 'fadeIn', // Name of jQuery animation for popup\r\n            showOptions: {}, // Options for enhanced animations\r\n            defaultDate: null, // Used when field is blank: actual date,\r\n            // +/-number for offset from today, null for today\r\n            appendText: '', // Display text following the input box, e.g. showing the format\r\n            buttonText: '...', // Text for trigger button\r\n            buttonImage: '', // URL for trigger button image\r\n            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button\r\n            hideIfNoPrevNext: false, // True to hide next/previous month links\r\n            // if not applicable, false to just disable them\r\n            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links\r\n            gotoCurrent: false, // True if today link goes back to current selection instead\r\n            changeMonth: false, // True if month can be selected directly, false if only prev/next\r\n            changeYear: false, // True if year can be selected directly, false if only prev/next\r\n            yearRange: 'c-10:c+10', // Range of years to display in drop-down,\r\n            // either relative to today's year (-nn:+nn), relative to currently displayed year\r\n            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\r\n            showOtherMonths: false, // True to show dates in other months, false to leave blank\r\n            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable\r\n            showWeek: false, // True to show week of the year, false to not show it\r\n            calculateWeek: this.iso8601Week, // How to calculate the week of the year,\r\n            // takes a Date and returns the number of the week for it\r\n            shortYearCutoff: '+10', // Short year values < this are in the current century,\r\n            // > this are in the previous century,\r\n            // string value starting with '+' for current year + value\r\n            minDate: null, // The earliest selectable date, or null for no limit\r\n            maxDate: null, // The latest selectable date, or null for no limit\r\n            duration: 'fast', // Duration of display/closure\r\n            beforeShowDay: null, // Function that takes a date and returns an array with\r\n            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',\r\n            // [2] = cell title (optional), e.g. $.datepicker.noWeekends\r\n            beforeShow: null, // Function that takes an input field and\r\n            // returns a set of custom settings for the date picker\r\n            onSelect: null, // Define a callback function when a date is selected\r\n            onChangeMonthYear: null, // Define a callback function when the month or year is changed\r\n            onClose: null, // Define a callback function when the datepicker is closed\r\n            numberOfMonths: 1, // Number of months to show at a time\r\n            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)\r\n            stepMonths: 1, // Number of months to step back/forward\r\n            stepBigMonths: 12, // Number of months to step back/forward for the big links\r\n            altField: '', // Selector for an alternate field to store selected dates into\r\n            altFormat: '', // The date format to use for the alternate field\r\n            constrainInput: true, // The input is constrained by the current date format\r\n            showButtonPanel: false, // True to show button panel, false to not show it\r\n            autoSize: false, // True to size the input for the date format, false to leave as is\r\n            disabled: false // The initial disabled state\r\n        };\r\n        $.extend(this._defaults, this.regional['']);\r\n        this.dpDiv = bindHover($('<div id=\"' + this._mainDivId + '\" class=\"ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\"></div>'));\r\n    }\r\n\r\n    $.extend(Datepicker.prototype, {\r\n        /* Class name added to elements to indicate already configured with a date picker. */\r\n        markerClassName: 'hasDatepicker',\r\n\r\n        //Keep track of the maximum number of rows displayed (see #7043)\r\n        maxRows: 4,\r\n\r\n        /* Debug logging (if enabled). */\r\n        log: function () {\r\n            if (this.debug)\r\n                console.log.apply('', arguments);\r\n        },\r\n\r\n        // TODO rename to \"widget\" when switching to widget factory\r\n        _widgetDatepicker: function () {\r\n            return this.dpDiv;\r\n        },\r\n\r\n        /* Override the default settings for all instances of the date picker.\r\n           @param  settings  object - the new settings to use as defaults (anonymous object)\r\n           @return the manager object */\r\n        setDefaults: function (settings) {\r\n            extendRemove(this._defaults, settings || {});\r\n            return this;\r\n        },\r\n\r\n        /* Attach the date picker to a jQuery selection.\r\n           @param  target    element - the target input field or division or span\r\n           @param  settings  object - the new settings to use for this date picker instance (anonymous) */\r\n        _attachDatepicker: function (target, settings) {\r\n            // check for settings on the control itself - in namespace 'date:'\r\n            var inlineSettings = null;\r\n            for (var attrName in this._defaults) {\r\n                var attrValue = target.getAttribute('date:' + attrName);\r\n                if (attrValue) {\r\n                    inlineSettings = inlineSettings || {};\r\n                    try {\r\n                        inlineSettings[attrName] = eval(attrValue);\r\n                    } catch (err) {\r\n                        inlineSettings[attrName] = attrValue;\r\n                    }\r\n                }\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            var inline = (nodeName == 'div' || nodeName == 'span');\r\n            if (!target.id) {\r\n                this.uuid += 1;\r\n                target.id = 'dp' + this.uuid;\r\n            }\r\n            var inst = this._newInst($(target), inline);\r\n            inst.settings = $.extend({}, settings || {}, inlineSettings || {});\r\n            if (nodeName == 'input') {\r\n                this._connectDatepicker(target, inst);\r\n            } else if (inline) {\r\n                this._inlineDatepicker(target, inst);\r\n            }\r\n        },\r\n\r\n        /* Create a new instance object. */\r\n        _newInst: function (target, inline) {\r\n            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\\\\\$1'); // escape jQuery meta chars\r\n            return {\r\n                id: id, input: target, // associated target\r\n                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection\r\n                drawMonth: 0, drawYear: 0, // month being drawn\r\n                inline: inline, // is datepicker inline or not\r\n                dpDiv: (!inline ? this.dpDiv : // presentation div\r\n                    bindHover($('<div class=\"' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\"></div>')))\r\n            };\r\n        },\r\n\r\n        /* Attach the date picker to an input field. */\r\n        _connectDatepicker: function (target, inst) {\r\n            var input = $(target);\r\n            inst.append = $([]);\r\n            inst.trigger = $([]);\r\n            if (input.hasClass(this.markerClassName))\r\n                return;\r\n            this._attachments(input, inst);\r\n            input.addClass(this.markerClassName).keydown(this._doKeyDown).\r\n                keypress(this._doKeyPress).keyup(this._doKeyUp).\r\n                bind(\"setData.datepicker\", function (event, key, value) {\r\n                    inst.settings[key] = value;\r\n                }).bind(\"getData.datepicker\", function (event, key) {\r\n                    return this._get(inst, key);\r\n                });\r\n            this._autoSize(inst);\r\n            $.data(target, PROP_NAME, inst);\r\n            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\r\n            if (inst.settings.disabled) {\r\n                this._disableDatepicker(target);\r\n            }\r\n        },\r\n\r\n        /* Make attachments based on settings. */\r\n        _attachments: function (input, inst) {\r\n            var appendText = this._get(inst, 'appendText');\r\n            var isRTL = this._get(inst, 'isRTL');\r\n            if (inst.append)\r\n                inst.append.remove();\r\n            if (appendText) {\r\n                inst.append = $('<span class=\"' + this._appendClass + '\">' + appendText + '</span>');\r\n                input[isRTL ? 'before' : 'after'](inst.append);\r\n            }\r\n            input.unbind('focus', this._showDatepicker);\r\n            if (inst.trigger)\r\n                inst.trigger.remove();\r\n            var showOn = this._get(inst, 'showOn');\r\n            if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field\r\n                input.focus(this._showDatepicker);\r\n            if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked\r\n                var buttonText = this._get(inst, 'buttonText');\r\n                var buttonImage = this._get(inst, 'buttonImage');\r\n                inst.trigger = $(this._get(inst, 'buttonImageOnly') ?\r\n                    $('<img/>').addClass(this._triggerClass).\r\n                        attr({ src: buttonImage, alt: buttonText, title: buttonText }) :\r\n                    $('<button type=\"button\"></button>').addClass(this._triggerClass).\r\n                        html(buttonImage == '' ? buttonText : $('<img/>').attr(\r\n                            { src: buttonImage, alt: buttonText, title: buttonText })));\r\n                input[isRTL ? 'before' : 'after'](inst.trigger);\r\n                inst.trigger.click(function () {\r\n                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])\r\n                        $.datepicker._hideDatepicker();\r\n                    else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {\r\n                        $.datepicker._hideDatepicker();\r\n                        $.datepicker._showDatepicker(input[0]);\r\n                    } else\r\n                        $.datepicker._showDatepicker(input[0]);\r\n                    return false;\r\n                });\r\n            }\r\n        },\r\n\r\n        /* Apply the maximum length for the date format. */\r\n        _autoSize: function (inst) {\r\n            if (this._get(inst, 'autoSize') && !inst.inline) {\r\n                var date = new Date(2009, 12 - 1, 20); // Ensure double digits\r\n                var dateFormat = this._get(inst, 'dateFormat');\r\n                if (dateFormat.match(/[DM]/)) {\r\n                    var findMax = function (names) {\r\n                        var max = 0;\r\n                        var maxI = 0;\r\n                        for (var i = 0; i < names.length; i++) {\r\n                            if (names[i].length > max) {\r\n                                max = names[i].length;\r\n                                maxI = i;\r\n                            }\r\n                        }\r\n                        return maxI;\r\n                    };\r\n                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?\r\n                        'monthNames' : 'monthNamesShort'))));\r\n                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?\r\n                        'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());\r\n                }\r\n                inst.input.attr('size', this._formatDate(inst, date).length);\r\n            }\r\n        },\r\n\r\n        /* Attach an inline date picker to a div. */\r\n        _inlineDatepicker: function (target, inst) {\r\n            var divSpan = $(target);\r\n            if (divSpan.hasClass(this.markerClassName))\r\n                return;\r\n            divSpan.addClass(this.markerClassName).append(inst.dpDiv).\r\n                bind(\"setData.datepicker\", function (event, key, value) {\r\n                    inst.settings[key] = value;\r\n                }).bind(\"getData.datepicker\", function (event, key) {\r\n                    return this._get(inst, key);\r\n                });\r\n            $.data(target, PROP_NAME, inst);\r\n            this._setDate(inst, this._getDefaultDate(inst), true);\r\n            this._updateDatepicker(inst);\r\n            this._updateAlternate(inst);\r\n            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\r\n            if (inst.settings.disabled) {\r\n                this._disableDatepicker(target);\r\n            }\r\n            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\r\n            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\r\n            inst.dpDiv.css(\"display\", \"block\");\r\n        },\r\n\r\n        /* Pop-up the date picker in a \"dialog\" box.\r\n           @param  input     element - ignored\r\n           @param  date      string or Date - the initial date to display\r\n           @param  onSelect  function - the function to call when a date is selected\r\n           @param  settings  object - update the dialog date picker instance's settings (anonymous object)\r\n           @param  pos       int[2] - coordinates for the dialog's position within the screen or\r\n                             event - with x/y coordinates or\r\n                             leave empty for default (screen centre)\r\n           @return the manager object */\r\n        _dialogDatepicker: function (input, date, onSelect, settings, pos) {\r\n            var inst = this._dialogInst; // internal instance\r\n            if (!inst) {\r\n                this.uuid += 1;\r\n                var id = 'dp' + this.uuid;\r\n                this._dialogInput = $('<input type=\"text\" id=\"' + id +\r\n                    '\" style=\"position: absolute; top: -100px; width: 0px;\"/>');\r\n                this._dialogInput.keydown(this._doKeyDown);\r\n                $('body').append(this._dialogInput);\r\n                inst = this._dialogInst = this._newInst(this._dialogInput, false);\r\n                inst.settings = {};\r\n                $.data(this._dialogInput[0], PROP_NAME, inst);\r\n            }\r\n            extendRemove(inst.settings, settings || {});\r\n            date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);\r\n            this._dialogInput.val(date);\r\n\r\n            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);\r\n            if (!this._pos) {\r\n                var browserWidth = document.documentElement.clientWidth;\r\n                var browserHeight = document.documentElement.clientHeight;\r\n                var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\r\n                var scrollY = document.documentElement.scrollTop || document.body.scrollTop;\r\n                this._pos = // should use actual width/height below\r\n                    [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];\r\n            }\r\n\r\n            // move input on screen for focus, but hidden behind dialog\r\n            this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');\r\n            inst.settings.onSelect = onSelect;\r\n            this._inDialog = true;\r\n            this.dpDiv.addClass(this._dialogClass);\r\n            this._showDatepicker(this._dialogInput[0]);\r\n            if ($.blockUI)\r\n                $.blockUI(this.dpDiv);\r\n            $.data(this._dialogInput[0], PROP_NAME, inst);\r\n            return this;\r\n        },\r\n\r\n        /* Detach a datepicker from its control.\r\n           @param  target    element - the target input field or division or span */\r\n        _destroyDatepicker: function (target) {\r\n            var $target = $(target);\r\n            var inst = $.data(target, PROP_NAME);\r\n            if (!$target.hasClass(this.markerClassName)) {\r\n                return;\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            $.removeData(target, PROP_NAME);\r\n            if (nodeName == 'input') {\r\n                inst.append.remove();\r\n                inst.trigger.remove();\r\n                $target.removeClass(this.markerClassName).\r\n                    unbind('focus', this._showDatepicker).\r\n                    unbind('keydown', this._doKeyDown).\r\n                    unbind('keypress', this._doKeyPress).\r\n                    unbind('keyup', this._doKeyUp);\r\n            } else if (nodeName == 'div' || nodeName == 'span')\r\n                $target.removeClass(this.markerClassName).empty();\r\n        },\r\n\r\n        /* Enable the date picker to a jQuery selection.\r\n           @param  target    element - the target input field or division or span */\r\n        _enableDatepicker: function (target) {\r\n            var $target = $(target);\r\n            var inst = $.data(target, PROP_NAME);\r\n            if (!$target.hasClass(this.markerClassName)) {\r\n                return;\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            if (nodeName == 'input') {\r\n                target.disabled = false;\r\n                inst.trigger.filter('button').\r\n                    each(function () { this.disabled = false; }).end().\r\n                    filter('img').css({ opacity: '1.0', cursor: '' });\r\n            }\r\n            else if (nodeName == 'div' || nodeName == 'span') {\r\n                var inline = $target.children('.' + this._inlineClass);\r\n                inline.children().removeClass('ui-state-disabled');\r\n                inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").\r\n                    prop(\"disabled\", false);\r\n            }\r\n            this._disabledInputs = $.map(this._disabledInputs,\r\n                function (value) { return (value == target ? null : value); }); // delete entry\r\n        },\r\n\r\n        /* Disable the date picker to a jQuery selection.\r\n           @param  target    element - the target input field or division or span */\r\n        _disableDatepicker: function (target) {\r\n            var $target = $(target);\r\n            var inst = $.data(target, PROP_NAME);\r\n            if (!$target.hasClass(this.markerClassName)) {\r\n                return;\r\n            }\r\n            var nodeName = target.nodeName.toLowerCase();\r\n            if (nodeName == 'input') {\r\n                target.disabled = true;\r\n                inst.trigger.filter('button').\r\n                    each(function () { this.disabled = true; }).end().\r\n                    filter('img').css({ opacity: '0.5', cursor: 'default' });\r\n            }\r\n            else if (nodeName == 'div' || nodeName == 'span') {\r\n                var inline = $target.children('.' + this._inlineClass);\r\n                inline.children().addClass('ui-state-disabled');\r\n                inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").\r\n                    prop(\"disabled\", true);\r\n            }\r\n            this._disabledInputs = $.map(this._disabledInputs,\r\n                function (value) { return (value == target ? null : value); }); // delete entry\r\n            this._disabledInputs[this._disabledInputs.length] = target;\r\n        },\r\n\r\n        /* Is the first field in a jQuery collection disabled as a datepicker?\r\n           @param  target    element - the target input field or division or span\r\n           @return boolean - true if disabled, false if enabled */\r\n        _isDisabledDatepicker: function (target) {\r\n            if (!target) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < this._disabledInputs.length; i++) {\r\n                if (this._disabledInputs[i] == target)\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        /* Retrieve the instance data for the target control.\r\n           @param  target  element - the target input field or division or span\r\n           @return  object - the associated instance data\r\n           @throws  error if a jQuery problem getting data */\r\n        _getInst: function (target) {\r\n            try {\r\n                return $.data(target, PROP_NAME);\r\n            }\r\n            catch (err) {\r\n                throw 'Missing instance data for this datepicker';\r\n            }\r\n        },\r\n\r\n        /* Update or retrieve the settings for a date picker attached to an input field or division.\r\n           @param  target  element - the target input field or division or span\r\n           @param  name    object - the new settings to update or\r\n                           string - the name of the setting to change or retrieve,\r\n                           when retrieving also 'all' for all instance settings or\r\n                           'defaults' for all global defaults\r\n           @param  value   any - the new value for the setting\r\n                           (omit if above is an object or to retrieve a value) */\r\n        _optionDatepicker: function (target, name, value) {\r\n            var inst = this._getInst(target);\r\n            if (arguments.length == 2 && typeof name == 'string') {\r\n                return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :\r\n                    (inst ? (name == 'all' ? $.extend({}, inst.settings) :\r\n                        this._get(inst, name)) : null));\r\n            }\r\n            var settings = name || {};\r\n            if (typeof name == 'string') {\r\n                settings = {};\r\n                settings[name] = value;\r\n            }\r\n            if (inst) {\r\n                if (this._curInst == inst) {\r\n                    this._hideDatepicker();\r\n                }\r\n                var date = this._getDateDatepicker(target, true);\r\n                var minDate = this._getMinMaxDate(inst, 'min');\r\n                var maxDate = this._getMinMaxDate(inst, 'max');\r\n                extendRemove(inst.settings, settings);\r\n                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\r\n                if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)\r\n                    inst.settings.minDate = this._formatDate(inst, minDate);\r\n                if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)\r\n                    inst.settings.maxDate = this._formatDate(inst, maxDate);\r\n                this._attachments($(target), inst);\r\n                this._autoSize(inst);\r\n                this._setDate(inst, date);\r\n                this._updateAlternate(inst);\r\n                this._updateDatepicker(inst);\r\n            }\r\n        },\r\n\r\n        // change method deprecated\r\n        _changeDatepicker: function (target, name, value) {\r\n            this._optionDatepicker(target, name, value);\r\n        },\r\n\r\n        /* Redraw the date picker attached to an input field or division.\r\n           @param  target  element - the target input field or division or span */\r\n        _refreshDatepicker: function (target) {\r\n            var inst = this._getInst(target);\r\n            if (inst) {\r\n                this._updateDatepicker(inst);\r\n            }\r\n        },\r\n\r\n        /* Set the dates for a jQuery selection.\r\n           @param  target   element - the target input field or division or span\r\n           @param  date     Date - the new date */\r\n        _setDateDatepicker: function (target, date) {\r\n            var inst = this._getInst(target);\r\n            if (inst) {\r\n                this._setDate(inst, date);\r\n                this._updateDatepicker(inst);\r\n                this._updateAlternate(inst);\r\n            }\r\n        },\r\n\r\n        /* Get the date(s) for the first entry in a jQuery selection.\r\n           @param  target     element - the target input field or division or span\r\n           @param  noDefault  boolean - true if no default date is to be used\r\n           @return Date - the current date */\r\n        _getDateDatepicker: function (target, noDefault) {\r\n            var inst = this._getInst(target);\r\n            if (inst && !inst.inline)\r\n                this._setDateFromField(inst, noDefault);\r\n            return (inst ? this._getDate(inst) : null);\r\n        },\r\n\r\n        /* Handle keystrokes. */\r\n        _doKeyDown: function (event) {\r\n            var inst = $.datepicker._getInst(event.target);\r\n            var handled = true;\r\n            var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');\r\n            inst._keyEvent = true;\r\n            if ($.datepicker._datepickerShowing)\r\n                switch (event.keyCode) {\r\n                    case 9: $.datepicker._hideDatepicker();\r\n                        handled = false;\r\n                        break; // hide on tab out\r\n                    case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' +\r\n                        $.datepicker._currentClass + ')', inst.dpDiv);\r\n                        if (sel[0])\r\n                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);\r\n                        var onSelect = $.datepicker._get(inst, 'onSelect');\r\n                        if (onSelect) {\r\n                            var dateStr = $.datepicker._formatDate(inst);\r\n\r\n                            // trigger custom callback\r\n                            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);\r\n                        }\r\n                        else\r\n                            $.datepicker._hideDatepicker();\r\n                        return false; // don't submit the form\r\n                        break; // select the value on enter\r\n                    case 27: $.datepicker._hideDatepicker();\r\n                        break; // hide on escape\r\n                    case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?\r\n                        -$.datepicker._get(inst, 'stepBigMonths') :\r\n                        -$.datepicker._get(inst, 'stepMonths')), 'M');\r\n                        break; // previous month/year on page up/+ ctrl\r\n                    case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?\r\n                        +$.datepicker._get(inst, 'stepBigMonths') :\r\n                        +$.datepicker._get(inst, 'stepMonths')), 'M');\r\n                        break; // next month/year on page down/+ ctrl\r\n                    case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);\r\n                        handled = event.ctrlKey || event.metaKey;\r\n                        break; // clear on ctrl or command +end\r\n                    case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);\r\n                        handled = event.ctrlKey || event.metaKey;\r\n                        break; // current on ctrl or command +home\r\n                    case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');\r\n                        handled = event.ctrlKey || event.metaKey;\r\n                        // -1 day on ctrl or command +left\r\n                        if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?\r\n                            -$.datepicker._get(inst, 'stepBigMonths') :\r\n                            -$.datepicker._get(inst, 'stepMonths')), 'M');\r\n                        // next month/year on alt +left on Mac\r\n                        break;\r\n                    case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');\r\n                        handled = event.ctrlKey || event.metaKey;\r\n                        break; // -1 week on ctrl or command +up\r\n                    case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');\r\n                        handled = event.ctrlKey || event.metaKey;\r\n                        // +1 day on ctrl or command +right\r\n                        if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?\r\n                            +$.datepicker._get(inst, 'stepBigMonths') :\r\n                            +$.datepicker._get(inst, 'stepMonths')), 'M');\r\n                        // next month/year on alt +right\r\n                        break;\r\n                    case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');\r\n                        handled = event.ctrlKey || event.metaKey;\r\n                        break; // +1 week on ctrl or command +down\r\n                    default: handled = false;\r\n                }\r\n            else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home\r\n                $.datepicker._showDatepicker(this);\r\n            else {\r\n                handled = false;\r\n            }\r\n            if (handled) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n        },\r\n\r\n        /* Filter entered characters - based on date format. */\r\n        _doKeyPress: function (event) {\r\n            var inst = $.datepicker._getInst(event.target);\r\n            if ($.datepicker._get(inst, 'constrainInput')) {\r\n                var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));\r\n                var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);\r\n                return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);\r\n            }\r\n        },\r\n\r\n        /* Synchronise manual entry and field/alternate field. */\r\n        _doKeyUp: function (event) {\r\n            var inst = $.datepicker._getInst(event.target);\r\n            if (inst.input.val() != inst.lastVal) {\r\n                try {\r\n                    var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),\r\n                        (inst.input ? inst.input.val() : null),\r\n                        $.datepicker._getFormatConfig(inst));\r\n                    if (date) { // only if valid\r\n                        $.datepicker._setDateFromField(inst);\r\n                        $.datepicker._updateAlternate(inst);\r\n                        $.datepicker._updateDatepicker(inst);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    $.datepicker.log(err);\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /* Pop-up the date picker for a given input field.\r\n           If false returned from beforeShow event handler do not show. \r\n           @param  input  element - the input field attached to the date picker or\r\n                          event - if triggered by focus */\r\n        _showDatepicker: function (input) {\r\n            input = input.target || input;\r\n            if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger\r\n                input = $('input', input.parentNode)[0];\r\n            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here\r\n                return;\r\n            var inst = $.datepicker._getInst(input);\r\n            if ($.datepicker._curInst && $.datepicker._curInst != inst) {\r\n                $.datepicker._curInst.dpDiv.stop(true, true);\r\n                if (inst && $.datepicker._datepickerShowing) {\r\n                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);\r\n                }\r\n            }\r\n            var beforeShow = $.datepicker._get(inst, 'beforeShow');\r\n            var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};\r\n            if (beforeShowSettings === false) {\r\n                //false\r\n                return;\r\n            }\r\n            extendRemove(inst.settings, beforeShowSettings);\r\n            inst.lastVal = null;\r\n            $.datepicker._lastInput = input;\r\n            $.datepicker._setDateFromField(inst);\r\n            if ($.datepicker._inDialog) // hide cursor\r\n                input.value = '';\r\n            if (!$.datepicker._pos) { // position below input\r\n                $.datepicker._pos = $.datepicker._findPos(input);\r\n                $.datepicker._pos[1] += input.offsetHeight; // add the height\r\n            }\r\n            var isFixed = false;\r\n            $(input).parents().each(function () {\r\n                isFixed |= $(this).css('position') == 'fixed';\r\n                return !isFixed;\r\n            });\r\n            var offset = { left: $.datepicker._pos[0], top: $.datepicker._pos[1] };\r\n            $.datepicker._pos = null;\r\n            //to avoid flashes on Firefox\r\n            inst.dpDiv.empty();\r\n            // determine sizing offscreen\r\n            inst.dpDiv.css({ position: 'absolute', display: 'block', top: '-1000px' });\r\n            $.datepicker._updateDatepicker(inst);\r\n            // fix width for dynamic number of date pickers\r\n            // and adjust position before showing\r\n            offset = $.datepicker._checkOffset(inst, offset, isFixed);\r\n            inst.dpDiv.css({\r\n                position: ($.datepicker._inDialog && $.blockUI ?\r\n                    'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',\r\n                left: offset.left + 'px', top: offset.top + 'px'\r\n            });\r\n            if (!inst.inline) {\r\n                var showAnim = $.datepicker._get(inst, 'showAnim');\r\n                var duration = $.datepicker._get(inst, 'duration');\r\n                var postProcess = function () {\r\n                    var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only\r\n                    if (!!cover.length) {\r\n                        var borders = $.datepicker._getBorders(inst.dpDiv);\r\n                        cover.css({\r\n                            left: -borders[0], top: -borders[1],\r\n                            width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()\r\n                        });\r\n                    }\r\n                };\r\n                inst.dpDiv.zIndex($(input).zIndex() + 1);\r\n                $.datepicker._datepickerShowing = true;\r\n\r\n                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\r\n                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim]))\r\n                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);\r\n                else\r\n                    inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);\r\n                if (!showAnim || !duration)\r\n                    postProcess();\r\n                if (inst.input.is(':visible') && !inst.input.is(':disabled'))\r\n                    inst.input.focus();\r\n                $.datepicker._curInst = inst;\r\n            }\r\n        },\r\n\r\n        /* Generate the date picker content. */\r\n        _updateDatepicker: function (inst) {\r\n            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\r\n            var borders = $.datepicker._getBorders(inst.dpDiv);\r\n            instActive = inst; // for delegate hover events\r\n            inst.dpDiv.empty().append(this._generateHTML(inst));\r\n            this._attachHandlers(inst);\r\n            var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only\r\n            if (!!cover.length) { //avoid call to outerXXXX() when not in IE6\r\n                cover.css({ left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight() })\r\n            }\r\n            inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();\r\n            var numMonths = this._getNumberOfMonths(inst);\r\n            var cols = numMonths[1];\r\n            var width = 17;\r\n            inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');\r\n            if (cols > 1)\r\n                inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');\r\n            inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +\r\n                'Class']('ui-datepicker-multi');\r\n            inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +\r\n                'Class']('ui-datepicker-rtl');\r\n            if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&\r\n                // #6694 - don't focus the input if it's already focused\r\n                // this breaks the change event in IE\r\n                inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)\r\n                inst.input.focus();\r\n            // deffered render of the years select (to avoid flashes on Firefox) \r\n            if (inst.yearshtml) {\r\n                var origyearshtml = inst.yearshtml;\r\n                setTimeout(function () {\r\n                    //assure that inst.yearshtml didn't change.\r\n                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {\r\n                        inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);\r\n                    }\r\n                    origyearshtml = inst.yearshtml = null;\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        /* Retrieve the size of left and top borders for an element.\r\n           @param  elem  (jQuery object) the element of interest\r\n           @return  (number[2]) the left and top borders */\r\n        _getBorders: function (elem) {\r\n            var convert = function (value) {\r\n                return { thin: 1, medium: 2, thick: 3 }[value] || value;\r\n            };\r\n            return [parseFloat(convert(elem.css('border-left-width'))),\r\n            parseFloat(convert(elem.css('border-top-width')))];\r\n        },\r\n\r\n        /* Check positioning to remain on screen. */\r\n        _checkOffset: function (inst, offset, isFixed) {\r\n            var dpWidth = inst.dpDiv.outerWidth();\r\n            var dpHeight = inst.dpDiv.outerHeight();\r\n            var inputWidth = inst.input ? inst.input.outerWidth() : 0;\r\n            var inputHeight = inst.input ? inst.input.outerHeight() : 0;\r\n            var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());\r\n            var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());\r\n\r\n            offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);\r\n            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;\r\n            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;\r\n\r\n            // now check if datepicker is showing outside window viewport - move to a better place if so.\r\n            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?\r\n                Math.abs(offset.left + dpWidth - viewWidth) : 0);\r\n            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?\r\n                Math.abs(dpHeight + inputHeight) : 0);\r\n\r\n            return offset;\r\n        },\r\n\r\n        /* Find an object's position on the screen. */\r\n        _findPos: function (obj) {\r\n            var inst = this._getInst(obj);\r\n            var isRTL = this._get(inst, 'isRTL');\r\n            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {\r\n                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];\r\n            }\r\n            var position = $(obj).offset();\r\n            return [position.left, position.top];\r\n        },\r\n\r\n        /* Hide the date picker from view.\r\n           @param  input  element - the input field attached to the date picker */\r\n        _hideDatepicker: function (input) {\r\n            var inst = this._curInst;\r\n            if (!inst || (input && inst != $.data(input, PROP_NAME)))\r\n                return;\r\n            if (this._datepickerShowing) {\r\n                var showAnim = this._get(inst, 'showAnim');\r\n                var duration = this._get(inst, 'duration');\r\n                var postProcess = function () {\r\n                    $.datepicker._tidyDialog(inst);\r\n                };\r\n\r\n                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\r\n                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim]))\r\n                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);\r\n                else\r\n                    inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :\r\n                        (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);\r\n                if (!showAnim)\r\n                    postProcess();\r\n                this._datepickerShowing = false;\r\n                var onClose = this._get(inst, 'onClose');\r\n                if (onClose)\r\n                    onClose.apply((inst.input ? inst.input[0] : null),\r\n                        [(inst.input ? inst.input.val() : ''), inst]);\r\n                this._lastInput = null;\r\n                if (this._inDialog) {\r\n                    this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });\r\n                    if ($.blockUI) {\r\n                        $.unblockUI();\r\n                        $('body').append(this.dpDiv);\r\n                    }\r\n                }\r\n                this._inDialog = false;\r\n            }\r\n        },\r\n\r\n        /* Tidy up after a dialog display. */\r\n        _tidyDialog: function (inst) {\r\n            inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');\r\n        },\r\n\r\n        /* Close date picker if clicked elsewhere. */\r\n        _checkExternalClick: function (event) {\r\n            if (!$.datepicker._curInst)\r\n                return;\r\n\r\n            var $target = $(event.target),\r\n                inst = $.datepicker._getInst($target[0]);\r\n\r\n            if ((($target[0].id != $.datepicker._mainDivId &&\r\n                $target.parents('#' + $.datepicker._mainDivId).length == 0 &&\r\n                !$target.hasClass($.datepicker.markerClassName) &&\r\n                !$target.closest(\".\" + $.datepicker._triggerClass).length &&\r\n                $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))) ||\r\n                ($target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst))\r\n                $.datepicker._hideDatepicker();\r\n        },\r\n\r\n        /* Adjust one of the date sub-fields. */\r\n        _adjustDate: function (id, offset, period) {\r\n            var target = $(id);\r\n            var inst = this._getInst(target[0]);\r\n            if (this._isDisabledDatepicker(target[0])) {\r\n                return;\r\n            }\r\n            this._adjustInstDate(inst, offset +\r\n                (period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning\r\n                period);\r\n            this._updateDatepicker(inst);\r\n        },\r\n\r\n        /* Action for current link. */\r\n        _gotoToday: function (id) {\r\n            var target = $(id);\r\n            var inst = this._getInst(target[0]);\r\n            if (this._get(inst, 'gotoCurrent') && inst.currentDay) {\r\n                inst.selectedDay = inst.currentDay;\r\n                inst.drawMonth = inst.selectedMonth = inst.currentMonth;\r\n                inst.drawYear = inst.selectedYear = inst.currentYear;\r\n            }\r\n            else {\r\n                var date = new Date();\r\n                inst.selectedDay = date.getDate();\r\n                inst.drawMonth = inst.selectedMonth = date.getMonth();\r\n                inst.drawYear = inst.selectedYear = date.getFullYear();\r\n            }\r\n            this._notifyChange(inst);\r\n            this._adjustDate(target);\r\n        },\r\n\r\n        /* Action for selecting a new month/year. */\r\n        _selectMonthYear: function (id, select, period) {\r\n            var target = $(id);\r\n            var inst = this._getInst(target[0]);\r\n            inst['selected' + (period == 'M' ? 'Month' : 'Year')] =\r\n                inst['draw' + (period == 'M' ? 'Month' : 'Year')] =\r\n                parseInt(select.options[select.selectedIndex].value, 10);\r\n            this._notifyChange(inst);\r\n            this._adjustDate(target);\r\n        },\r\n\r\n        /* Action for selecting a day. */\r\n        _selectDay: function (id, month, year, td) {\r\n            var target = $(id);\r\n            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {\r\n                return;\r\n            }\r\n            var inst = this._getInst(target[0]);\r\n            inst.selectedDay = inst.currentDay = $('a', td).html();\r\n            inst.selectedMonth = inst.currentMonth = month;\r\n            inst.selectedYear = inst.currentYear = year;\r\n            this._selectDate(id, this._formatDate(inst,\r\n                inst.currentDay, inst.currentMonth, inst.currentYear));\r\n        },\r\n\r\n        /* Erase the input field and hide the date picker. */\r\n        _clearDate: function (id) {\r\n            var target = $(id);\r\n            var inst = this._getInst(target[0]);\r\n            this._selectDate(target, '');\r\n        },\r\n\r\n        /* Update the input field with the selected date. */\r\n        _selectDate: function (id, dateStr) {\r\n            var target = $(id);\r\n            var inst = this._getInst(target[0]);\r\n            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));\r\n            if (inst.input)\r\n                inst.input.val(dateStr);\r\n            this._updateAlternate(inst);\r\n            var onSelect = this._get(inst, 'onSelect');\r\n            if (onSelect)\r\n                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback\r\n            else if (inst.input)\r\n                inst.input.trigger('change'); // fire the change event\r\n            if (inst.inline)\r\n                this._updateDatepicker(inst);\r\n            else {\r\n                this._hideDatepicker();\r\n                this._lastInput = inst.input[0];\r\n                if (typeof (inst.input[0]) != 'object')\r\n                    inst.input.focus(); // restore focus\r\n                this._lastInput = null;\r\n            }\r\n        },\r\n\r\n        /* Update any alternate field to synchronise with the main field. */\r\n        _updateAlternate: function (inst) {\r\n            var altField = this._get(inst, 'altField');\r\n            if (altField) { // update alternate field too\r\n                var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');\r\n                var date = this._getDate(inst);\r\n                var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));\r\n                $(altField).each(function () { $(this).val(dateStr); });\r\n            }\r\n        },\r\n\r\n        /* Set as beforeShowDay function to prevent selection of weekends.\r\n           @param  date  Date - the date to customise\r\n           @return [boolean, string] - is this date selectable?, what is its CSS class? */\r\n        noWeekends: function (date) {\r\n            var day = date.getDay();\r\n            return [(day > 0 && day < 6), ''];\r\n        },\r\n\r\n        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\r\n           @param  date  Date - the date to get the week for\r\n           @return  number - the number of the week within the year that contains this date */\r\n        iso8601Week: function (date) {\r\n            var checkDate = new Date(date.getTime());\r\n            // Find Thursday of this week starting on Monday\r\n            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\r\n            var time = checkDate.getTime();\r\n            checkDate.setMonth(0); // Compare with Jan 1\r\n            checkDate.setDate(1);\r\n            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\r\n        },\r\n\r\n        /* Parse a string value into a date object.\r\n           See formatDate below for the possible formats.\r\n    \r\n           @param  format    string - the expected format of the date\r\n           @param  value     string - the date in the above format\r\n           @param  settings  Object - attributes include:\r\n                             shortYearCutoff  number - the cutoff year for determining the century (optional)\r\n                             dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)\r\n                             dayNames         string[7] - names of the days from Sunday (optional)\r\n                             monthNamesShort  string[12] - abbreviated names of the months (optional)\r\n                             monthNames       string[12] - names of the months (optional)\r\n           @return  Date - the extracted date value or null if value is blank */\r\n        parseDate: function (format, value, settings) {\r\n            if (format == null || value == null)\r\n                throw 'Invalid arguments';\r\n            value = (typeof value == 'object' ? value.toString() : value + '');\r\n            if (value == '')\r\n                return null;\r\n            var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;\r\n            shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :\r\n                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));\r\n            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;\r\n            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;\r\n            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;\r\n            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;\r\n            var year = -1;\r\n            var month = -1;\r\n            var day = -1;\r\n            var doy = -1;\r\n            var literal = false;\r\n            // Check whether a format character is doubled\r\n            var lookAhead = function (match) {\r\n                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);\r\n                if (matches)\r\n                    iFormat++;\r\n                return matches;\r\n            };\r\n            // Extract a number from the string value\r\n            var getNumber = function (match) {\r\n                var isDoubled = lookAhead(match);\r\n                var size = (match == '@' ? 14 : (match == '!' ? 20 :\r\n                    (match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));\r\n                var digits = new RegExp('^\\\\d{1,' + size + '}');\r\n                var num = value.substring(iValue).match(digits);\r\n                if (!num)\r\n                    throw 'Missing number at position ' + iValue;\r\n                iValue += num[0].length;\r\n                return parseInt(num[0], 10);\r\n            };\r\n            // Extract a name from the string value and convert to an index\r\n            var getName = function (match, shortNames, longNames) {\r\n                var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {\r\n                    return [[k, v]];\r\n                }).sort(function (a, b) {\r\n                    return -(a[1].length - b[1].length);\r\n                });\r\n                var index = -1;\r\n                $.each(names, function (i, pair) {\r\n                    var name = pair[1];\r\n                    if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {\r\n                        index = pair[0];\r\n                        iValue += name.length;\r\n                        return false;\r\n                    }\r\n                });\r\n                if (index != -1)\r\n                    return index + 1;\r\n                else\r\n                    throw 'Unknown name at position ' + iValue;\r\n            };\r\n            // Confirm that a literal character matches the string value\r\n            var checkLiteral = function () {\r\n                if (value.charAt(iValue) != format.charAt(iFormat))\r\n                    throw 'Unexpected literal at position ' + iValue;\r\n                iValue++;\r\n            };\r\n            var iValue = 0;\r\n            for (var iFormat = 0; iFormat < format.length; iFormat++) {\r\n                if (literal)\r\n                    if (format.charAt(iFormat) == \"'\" && !lookAhead(\"'\"))\r\n                        literal = false;\r\n                    else\r\n                        checkLiteral();\r\n                else\r\n                    switch (format.charAt(iFormat)) {\r\n                        case 'd':\r\n                            day = getNumber('d');\r\n                            break;\r\n                        case 'D':\r\n                            getName('D', dayNamesShort, dayNames);\r\n                            break;\r\n                        case 'o':\r\n                            doy = getNumber('o');\r\n                            break;\r\n                        case 'm':\r\n                            month = getNumber('m');\r\n                            break;\r\n                        case 'M':\r\n                            month = getName('M', monthNamesShort, monthNames);\r\n                            break;\r\n                        case 'y':\r\n                            year = getNumber('y');\r\n                            break;\r\n                        case '@':\r\n                            var date = new Date(getNumber('@'));\r\n                            year = date.getFullYear();\r\n                            month = date.getMonth() + 1;\r\n                            day = date.getDate();\r\n                            break;\r\n                        case '!':\r\n                            var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);\r\n                            year = date.getFullYear();\r\n                            month = date.getMonth() + 1;\r\n                            day = date.getDate();\r\n                            break;\r\n                        case \"'\":\r\n                            if (lookAhead(\"'\"))\r\n                                checkLiteral();\r\n                            else\r\n                                literal = true;\r\n                            break;\r\n                        default:\r\n                            checkLiteral();\r\n                    }\r\n            }\r\n            if (iValue < value.length) {\r\n                var extra = value.substr(iValue);\r\n                if (!/^\\s+/.test(extra)) {\r\n                    throw \"Extra/unparsed characters found in date: \" + extra;\r\n                }\r\n            }\r\n            if (year == -1)\r\n                year = new Date().getFullYear();\r\n            else if (year < 100)\r\n                year += new Date().getFullYear() - new Date().getFullYear() % 100 +\r\n                    (year <= shortYearCutoff ? 0 : -100);\r\n            if (doy > -1) {\r\n                month = 1;\r\n                day = doy;\r\n                do {\r\n                    var dim = this._getDaysInMonth(year, month - 1);\r\n                    if (day <= dim)\r\n                        break;\r\n                    month++;\r\n                    day -= dim;\r\n                } while (true);\r\n            }\r\n            var date = this._daylightSavingAdjust(new Date(year, month - 1, day));\r\n            if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)\r\n                throw 'Invalid date'; // E.g. 31/02/00\r\n            return date;\r\n        },\r\n\r\n        /* Standard date formats. */\r\n        ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)\r\n        COOKIE: 'D, dd M yy',\r\n        ISO_8601: 'yy-mm-dd',\r\n        RFC_822: 'D, d M y',\r\n        RFC_850: 'DD, dd-M-y',\r\n        RFC_1036: 'D, d M y',\r\n        RFC_1123: 'D, d M yy',\r\n        RFC_2822: 'D, d M yy',\r\n        RSS: 'D, d M y', // RFC 822\r\n        TICKS: '!',\r\n        TIMESTAMP: '@',\r\n        W3C: 'yy-mm-dd', // ISO 8601\r\n\r\n        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +\r\n            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),\r\n\r\n        /* Format a date object into a string value.\r\n           The format can be combinations of the following:\r\n           d  - day of month (no leading zero)\r\n           dd - day of month (two digit)\r\n           o  - day of year (no leading zeros)\r\n           oo - day of year (three digit)\r\n           D  - day name short\r\n           DD - day name long\r\n           m  - month of year (no leading zero)\r\n           mm - month of year (two digit)\r\n           M  - month name short\r\n           MM - month name long\r\n           y  - year (two digit)\r\n           yy - year (four digit)\r\n           @ - Unix timestamp (ms since 01/01/1970)\r\n           ! - Windows ticks (100ns since 01/01/0001)\r\n           '...' - literal text\r\n           '' - single quote\r\n    \r\n           @param  format    string - the desired format of the date\r\n           @param  date      Date - the date value to format\r\n           @param  settings  Object - attributes include:\r\n                             dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)\r\n                             dayNames         string[7] - names of the days from Sunday (optional)\r\n                             monthNamesShort  string[12] - abbreviated names of the months (optional)\r\n                             monthNames       string[12] - names of the months (optional)\r\n           @return  string - the date in the above format */\r\n        formatDate: function (format, date, settings) {\r\n            if (!date)\r\n                return '';\r\n            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;\r\n            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;\r\n            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;\r\n            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;\r\n            // Check whether a format character is doubled\r\n            var lookAhead = function (match) {\r\n                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);\r\n                if (matches)\r\n                    iFormat++;\r\n                return matches;\r\n            };\r\n            // Format a number, with leading zero if necessary\r\n            var formatNumber = function (match, value, len) {\r\n                var num = '' + value;\r\n                if (lookAhead(match))\r\n                    while (num.length < len)\r\n                        num = '0' + num;\r\n                return num;\r\n            };\r\n            // Format a name, short or long as requested\r\n            var formatName = function (match, value, shortNames, longNames) {\r\n                return (lookAhead(match) ? longNames[value] : shortNames[value]);\r\n            };\r\n            var output = '';\r\n            var literal = false;\r\n            if (date)\r\n                for (var iFormat = 0; iFormat < format.length; iFormat++) {\r\n                    if (literal)\r\n                        if (format.charAt(iFormat) == \"'\" && !lookAhead(\"'\"))\r\n                            literal = false;\r\n                        else\r\n                            output += format.charAt(iFormat);\r\n                    else\r\n                        switch (format.charAt(iFormat)) {\r\n                            case 'd':\r\n                                output += formatNumber('d', date.getDate(), 2);\r\n                                break;\r\n                            case 'D':\r\n                                output += formatName('D', date.getDay(), dayNamesShort, dayNames);\r\n                                break;\r\n                            case 'o':\r\n                                output += formatNumber('o',\r\n                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\r\n                                break;\r\n                            case 'm':\r\n                                output += formatNumber('m', date.getMonth() + 1, 2);\r\n                                break;\r\n                            case 'M':\r\n                                output += formatName('M', date.getMonth(), monthNamesShort, monthNames);\r\n                                break;\r\n                            case 'y':\r\n                                output += (lookAhead('y') ? date.getFullYear() :\r\n                                    (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);\r\n                                break;\r\n                            case '@':\r\n                                output += date.getTime();\r\n                                break;\r\n                            case '!':\r\n                                output += date.getTime() * 10000 + this._ticksTo1970;\r\n                                break;\r\n                            case \"'\":\r\n                                if (lookAhead(\"'\"))\r\n                                    output += \"'\";\r\n                                else\r\n                                    literal = true;\r\n                                break;\r\n                            default:\r\n                                output += format.charAt(iFormat);\r\n                        }\r\n                }\r\n            return output;\r\n        },\r\n\r\n        /* Extract all possible characters from the date format. */\r\n        _possibleChars: function (format) {\r\n            var chars = '';\r\n            var literal = false;\r\n            // Check whether a format character is doubled\r\n            var lookAhead = function (match) {\r\n                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);\r\n                if (matches)\r\n                    iFormat++;\r\n                return matches;\r\n            };\r\n            for (var iFormat = 0; iFormat < format.length; iFormat++)\r\n                if (literal)\r\n                    if (format.charAt(iFormat) == \"'\" && !lookAhead(\"'\"))\r\n                        literal = false;\r\n                    else\r\n                        chars += format.charAt(iFormat);\r\n                else\r\n                    switch (format.charAt(iFormat)) {\r\n                        case 'd': case 'm': case 'y': case '@':\r\n                            chars += '0123456789';\r\n                            break;\r\n                        case 'D': case 'M':\r\n                            return null; // Accept anything\r\n                        case \"'\":\r\n                            if (lookAhead(\"'\"))\r\n                                chars += \"'\";\r\n                            else\r\n                                literal = true;\r\n                            break;\r\n                        default:\r\n                            chars += format.charAt(iFormat);\r\n                    }\r\n            return chars;\r\n        },\r\n\r\n        /* Get a setting value, defaulting if necessary. */\r\n        _get: function (inst, name) {\r\n            return inst.settings[name] !== undefined ?\r\n                inst.settings[name] : this._defaults[name];\r\n        },\r\n\r\n        /* Parse existing date and initialise date picker. */\r\n        _setDateFromField: function (inst, noDefault) {\r\n            if (inst.input.val() == inst.lastVal) {\r\n                return;\r\n            }\r\n            var dateFormat = this._get(inst, 'dateFormat');\r\n            var dates = inst.lastVal = inst.input ? inst.input.val() : null;\r\n            var date, defaultDate;\r\n            date = defaultDate = this._getDefaultDate(inst);\r\n            var settings = this._getFormatConfig(inst);\r\n            try {\r\n                date = this.parseDate(dateFormat, dates, settings) || defaultDate;\r\n            } catch (event) {\r\n                this.log(event);\r\n                dates = (noDefault ? '' : dates);\r\n            }\r\n            inst.selectedDay = date.getDate();\r\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\r\n            inst.drawYear = inst.selectedYear = date.getFullYear();\r\n            inst.currentDay = (dates ? date.getDate() : 0);\r\n            inst.currentMonth = (dates ? date.getMonth() : 0);\r\n            inst.currentYear = (dates ? date.getFullYear() : 0);\r\n            this._adjustInstDate(inst);\r\n        },\r\n\r\n        /* Retrieve the default date shown on opening. */\r\n        _getDefaultDate: function (inst) {\r\n            return this._restrictMinMax(inst,\r\n                this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));\r\n        },\r\n\r\n        /* A date may be specified as an exact value or a relative one. */\r\n        _determineDate: function (inst, date, defaultDate) {\r\n            var offsetNumeric = function (offset) {\r\n                var date = new Date();\r\n                date.setDate(date.getDate() + offset);\r\n                return date;\r\n            };\r\n            var offsetString = function (offset) {\r\n                try {\r\n                    return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),\r\n                        offset, $.datepicker._getFormatConfig(inst));\r\n                }\r\n                catch (e) {\r\n                    // Ignore\r\n                }\r\n                var date = (offset.toLowerCase().match(/^c/) ?\r\n                    $.datepicker._getDate(inst) : null) || new Date();\r\n                var year = date.getFullYear();\r\n                var month = date.getMonth();\r\n                var day = date.getDate();\r\n                var pattern = /([+-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g;\r\n                var matches = pattern.exec(offset);\r\n                while (matches) {\r\n                    switch (matches[2] || 'd') {\r\n                        case 'd': case 'D':\r\n                            day += parseInt(matches[1], 10); break;\r\n                        case 'w': case 'W':\r\n                            day += parseInt(matches[1], 10) * 7; break;\r\n                        case 'm': case 'M':\r\n                            month += parseInt(matches[1], 10);\r\n                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\r\n                            break;\r\n                        case 'y': case 'Y':\r\n                            year += parseInt(matches[1], 10);\r\n                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\r\n                            break;\r\n                    }\r\n                    matches = pattern.exec(offset);\r\n                }\r\n                return new Date(year, month, day);\r\n            };\r\n            var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :\r\n                (typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));\r\n            newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);\r\n            if (newDate) {\r\n                newDate.setHours(0);\r\n                newDate.setMinutes(0);\r\n                newDate.setSeconds(0);\r\n                newDate.setMilliseconds(0);\r\n            }\r\n            return this._daylightSavingAdjust(newDate);\r\n        },\r\n\r\n        /* Handle switch to/from daylight saving.\r\n           Hours may be non-zero on daylight saving cut-over:\r\n           > 12 when midnight changeover, but then cannot generate\r\n           midnight datetime, so jump to 1AM, otherwise reset.\r\n           @param  date  (Date) the date to check\r\n           @return  (Date) the corrected date */\r\n        _daylightSavingAdjust: function (date) {\r\n            if (!date) return null;\r\n            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n            return date;\r\n        },\r\n\r\n        /* Set the date(s) directly. */\r\n        _setDate: function (inst, date, noChange) {\r\n            var clear = !date;\r\n            var origMonth = inst.selectedMonth;\r\n            var origYear = inst.selectedYear;\r\n            var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));\r\n            inst.selectedDay = inst.currentDay = newDate.getDate();\r\n            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\r\n            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\r\n            if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)\r\n                this._notifyChange(inst);\r\n            this._adjustInstDate(inst);\r\n            if (inst.input) {\r\n                inst.input.val(clear ? '' : this._formatDate(inst));\r\n            }\r\n        },\r\n\r\n        /* Retrieve the date(s) directly. */\r\n        _getDate: function (inst) {\r\n            var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :\r\n                this._daylightSavingAdjust(new Date(\r\n                    inst.currentYear, inst.currentMonth, inst.currentDay)));\r\n            return startDate;\r\n        },\r\n\r\n        /* Attach the onxxx handlers.  These are declared statically so\r\n         * they work with static code transformers like Caja.\r\n         */\r\n        _attachHandlers: function (inst) {\r\n            var stepMonths = this._get(inst, 'stepMonths');\r\n            var id = '#' + inst.id.replace(/\\\\\\\\/g, \"\\\\\");\r\n            inst.dpDiv.find('[data-handler]').map(function () {\r\n                var handler = {\r\n                    prev: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, -stepMonths, 'M');\r\n                    },\r\n                    next: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, +stepMonths, 'M');\r\n                    },\r\n                    hide: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();\r\n                    },\r\n                    today: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._gotoToday(id);\r\n                    },\r\n                    selectDay: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);\r\n                        return false;\r\n                    },\r\n                    selectMonth: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'M');\r\n                        return false;\r\n                    },\r\n                    selectYear: function () {\r\n                        window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'Y');\r\n                        return false;\r\n                    }\r\n                };\r\n                $(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);\r\n            });\r\n        },\r\n\r\n        /* Generate the HTML for the current state of the date picker. */\r\n        _generateHTML: function (inst) {\r\n            var today = new Date();\r\n            today = this._daylightSavingAdjust(\r\n                new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time\r\n            var isRTL = this._get(inst, 'isRTL');\r\n            var showButtonPanel = this._get(inst, 'showButtonPanel');\r\n            var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');\r\n            var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');\r\n            var numMonths = this._getNumberOfMonths(inst);\r\n            var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');\r\n            var stepMonths = this._get(inst, 'stepMonths');\r\n            var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);\r\n            var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :\r\n                new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));\r\n            var minDate = this._getMinMaxDate(inst, 'min');\r\n            var maxDate = this._getMinMaxDate(inst, 'max');\r\n            var drawMonth = inst.drawMonth - showCurrentAtPos;\r\n            var drawYear = inst.drawYear;\r\n            if (drawMonth < 0) {\r\n                drawMonth += 12;\r\n                drawYear--;\r\n            }\r\n            if (maxDate) {\r\n                var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),\r\n                    maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));\r\n                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);\r\n                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\r\n                    drawMonth--;\r\n                    if (drawMonth < 0) {\r\n                        drawMonth = 11;\r\n                        drawYear--;\r\n                    }\r\n                }\r\n            }\r\n            inst.drawMonth = drawMonth;\r\n            inst.drawYear = drawYear;\r\n            var prevText = this._get(inst, 'prevText');\r\n            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,\r\n                this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),\r\n                this._getFormatConfig(inst)));\r\n            var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?\r\n                '<a class=\"ui-datepicker-prev ui-corner-all\" data-handler=\"prev\" data-event=\"click\"' +\r\n                ' title=\"' + prevText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\">' + prevText + '</span></a>' :\r\n                (hideIfNoPrevNext ? '' : '<a class=\"ui-datepicker-prev ui-corner-all ui-state-disabled\" title=\"' + prevText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\">' + prevText + '</span></a>'));\r\n            var nextText = this._get(inst, 'nextText');\r\n            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,\r\n                this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),\r\n                this._getFormatConfig(inst)));\r\n            var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?\r\n                '<a class=\"ui-datepicker-next ui-corner-all\" data-handler=\"next\" data-event=\"click\"' +\r\n                ' title=\"' + nextText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\">' + nextText + '</span></a>' :\r\n                (hideIfNoPrevNext ? '' : '<a class=\"ui-datepicker-next ui-corner-all ui-state-disabled\" title=\"' + nextText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\">' + nextText + '</span></a>'));\r\n            var currentText = this._get(inst, 'currentText');\r\n            var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);\r\n            currentText = (!navigationAsDateFormat ? currentText :\r\n                this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));\r\n            var controls = (!inst.inline ? '<button type=\"button\" class=\"ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all\" data-handler=\"hide\" data-event=\"click\">' +\r\n                this._get(inst, 'closeText') + '</button>' : '');\r\n            var buttonPanel = (showButtonPanel) ? '<div class=\"ui-datepicker-buttonpane ui-widget-content\">' + (isRTL ? controls : '') +\r\n                (this._isInRange(inst, gotoDate) ? '<button type=\"button\" class=\"ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all\" data-handler=\"today\" data-event=\"click\"' +\r\n                    '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';\r\n            var firstDay = parseInt(this._get(inst, 'firstDay'), 10);\r\n            firstDay = (isNaN(firstDay) ? 0 : firstDay);\r\n            var showWeek = this._get(inst, 'showWeek');\r\n            var dayNames = this._get(inst, 'dayNames');\r\n            var dayNamesShort = this._get(inst, 'dayNamesShort');\r\n            var dayNamesMin = this._get(inst, 'dayNamesMin');\r\n            var monthNames = this._get(inst, 'monthNames');\r\n            var monthNamesShort = this._get(inst, 'monthNamesShort');\r\n            var beforeShowDay = this._get(inst, 'beforeShowDay');\r\n            var showOtherMonths = this._get(inst, 'showOtherMonths');\r\n            var selectOtherMonths = this._get(inst, 'selectOtherMonths');\r\n            var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;\r\n            var defaultDate = this._getDefaultDate(inst);\r\n            var html = '';\r\n            for (var row = 0; row < numMonths[0]; row++) {\r\n                var group = '';\r\n                this.maxRows = 4;\r\n                for (var col = 0; col < numMonths[1]; col++) {\r\n                    var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\r\n                    var cornerClass = ' ui-corner-all';\r\n                    var calender = '';\r\n                    if (isMultiMonth) {\r\n                        calender += '<div class=\"ui-datepicker-group';\r\n                        if (numMonths[1] > 1)\r\n                            switch (col) {\r\n                                case 0: calender += ' ui-datepicker-group-first';\r\n                                    cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;\r\n                                case numMonths[1] - 1: calender += ' ui-datepicker-group-last';\r\n                                    cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;\r\n                                default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;\r\n                            }\r\n                        calender += '\">';\r\n                    }\r\n                    calender += '<div class=\"ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '\">' +\r\n                        (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +\r\n                        (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +\r\n                        this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,\r\n                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\r\n                        '</div><table class=\"ui-datepicker-calendar\"><thead>' +\r\n                        '<tr>';\r\n                    var thead = (showWeek ? '<th class=\"ui-datepicker-week-col\">' + this._get(inst, 'weekHeader') + '</th>' : '');\r\n                    for (var dow = 0; dow < 7; dow++) { // days of the week\r\n                        var day = (dow + firstDay) % 7;\r\n                        thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class=\"ui-datepicker-week-end\"' : '') + '>' +\r\n                            '<span title=\"' + dayNames[day] + '\">' + dayNamesMin[day] + '</span></th>';\r\n                    }\r\n                    calender += thead + '</tr></thead><tbody>';\r\n                    var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\r\n                    if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)\r\n                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\r\n                    var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\r\n                    var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\r\n                    var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)\r\n                    this.maxRows = numRows;\r\n                    var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\r\n                    for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows\r\n                        calender += '<tr>';\r\n                        var tbody = (!showWeek ? '' : '<td class=\"ui-datepicker-week-col\">' +\r\n                            this._get(inst, 'calculateWeek')(printDate) + '</td>');\r\n                        for (var dow = 0; dow < 7; dow++) { // create date picker days\r\n                            var daySettings = (beforeShowDay ?\r\n                                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);\r\n                            var otherMonth = (printDate.getMonth() != drawMonth);\r\n                            var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||\r\n                                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);\r\n                            tbody += '<td class=\"' +\r\n                                ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends\r\n                                (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months\r\n                                ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key\r\n                                    (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?\r\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\r\n                                    ' ' + this._dayOverClass : '') + // highlight selected day\r\n                                (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') +  // highlight unselectable days\r\n                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates\r\n                                    (printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day\r\n                                    (printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '\"' + // highlight today (if different)\r\n                                ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title=\"' + daySettings[2] + '\"' : '') + // cell title\r\n                                (unselectable ? '' : ' data-handler=\"selectDay\" data-event=\"click\" data-month=\"' + printDate.getMonth() + '\" data-year=\"' + printDate.getFullYear() + '\"') + '>' + // actions\r\n                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months\r\n                                    (unselectable ? '<span class=\"ui-state-default\">' + printDate.getDate() + '</span>' : '<a class=\"ui-state-default' +\r\n                                        (printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +\r\n                                        (printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day\r\n                                        (otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months\r\n                                        '\" href=\"#\">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date\r\n                            printDate.setDate(printDate.getDate() + 1);\r\n                            printDate = this._daylightSavingAdjust(printDate);\r\n                        }\r\n                        calender += tbody + '</tr>';\r\n                    }\r\n                    drawMonth++;\r\n                    if (drawMonth > 11) {\r\n                        drawMonth = 0;\r\n                        drawYear++;\r\n                    }\r\n                    calender += '</tbody></table>' + (isMultiMonth ? '</div>' +\r\n                        ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class=\"ui-datepicker-row-break\"></div>' : '') : '');\r\n                    group += calender;\r\n                }\r\n                html += group;\r\n            }\r\n            html += buttonPanel + ($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ?\r\n                '<iframe src=\"javascript:false;\" class=\"ui-datepicker-cover\" frameborder=\"0\"></iframe>' : '');\r\n            inst._keyEvent = false;\r\n            return html;\r\n        },\r\n\r\n        /* Generate the month and year header. */\r\n        _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate,\r\n            secondary, monthNames, monthNamesShort) {\r\n            var changeMonth = this._get(inst, 'changeMonth');\r\n            var changeYear = this._get(inst, 'changeYear');\r\n            var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');\r\n            var html = '<div class=\"ui-datepicker-title\">';\r\n            var monthHtml = '';\r\n            // month selection\r\n            if (secondary || !changeMonth)\r\n                monthHtml += '<span class=\"ui-datepicker-month\">' + monthNames[drawMonth] + '</span>';\r\n            else {\r\n                var inMinYear = (minDate && minDate.getFullYear() == drawYear);\r\n                var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);\r\n                monthHtml += '<select class=\"ui-datepicker-month\" data-handler=\"selectMonth\" data-event=\"change\">';\r\n                for (var month = 0; month < 12; month++) {\r\n                    if ((!inMinYear || month >= minDate.getMonth()) &&\r\n                        (!inMaxYear || month <= maxDate.getMonth()))\r\n                        monthHtml += '<option value=\"' + month + '\"' +\r\n                            (month == drawMonth ? ' selected=\"selected\"' : '') +\r\n                            '>' + monthNamesShort[month] + '</option>';\r\n                }\r\n                monthHtml += '</select>';\r\n            }\r\n            if (!showMonthAfterYear)\r\n                html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');\r\n            // year selection\r\n            if (!inst.yearshtml) {\r\n                inst.yearshtml = '';\r\n                if (secondary || !changeYear)\r\n                    html += '<span class=\"ui-datepicker-year\">' + drawYear + '</span>';\r\n                else {\r\n                    // determine range of years to display\r\n                    var years = this._get(inst, 'yearRange').split(':');\r\n                    var thisYear = new Date().getFullYear();\r\n                    var determineYear = function (value) {\r\n                        var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :\r\n                            (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :\r\n                                parseInt(value, 10)));\r\n                        return (isNaN(year) ? thisYear : year);\r\n                    };\r\n                    var year = determineYear(years[0]);\r\n                    var endYear = Math.max(year, determineYear(years[1] || ''));\r\n                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);\r\n                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);\r\n                    inst.yearshtml += '<select class=\"ui-datepicker-year\" data-handler=\"selectYear\" data-event=\"change\">';\r\n                    for (; year <= endYear; year++) {\r\n                        inst.yearshtml += '<option value=\"' + year + '\"' +\r\n                            (year == drawYear ? ' selected=\"selected\"' : '') +\r\n                            '>' + year + '</option>';\r\n                    }\r\n                    inst.yearshtml += '</select>';\r\n\r\n                    html += inst.yearshtml;\r\n                    inst.yearshtml = null;\r\n                }\r\n            }\r\n            html += this._get(inst, 'yearSuffix');\r\n            if (showMonthAfterYear)\r\n                html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;\r\n            html += '</div>'; // Close datepicker_header\r\n            return html;\r\n        },\r\n\r\n        /* Adjust one of the date sub-fields. */\r\n        _adjustInstDate: function (inst, offset, period) {\r\n            var year = inst.drawYear + (period == 'Y' ? offset : 0);\r\n            var month = inst.drawMonth + (period == 'M' ? offset : 0);\r\n            var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +\r\n                (period == 'D' ? offset : 0);\r\n            var date = this._restrictMinMax(inst,\r\n                this._daylightSavingAdjust(new Date(year, month, day)));\r\n            inst.selectedDay = date.getDate();\r\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\r\n            inst.drawYear = inst.selectedYear = date.getFullYear();\r\n            if (period == 'M' || period == 'Y')\r\n                this._notifyChange(inst);\r\n        },\r\n\r\n        /* Ensure a date is within any min/max bounds. */\r\n        _restrictMinMax: function (inst, date) {\r\n            var minDate = this._getMinMaxDate(inst, 'min');\r\n            var maxDate = this._getMinMaxDate(inst, 'max');\r\n            var newDate = (minDate && date < minDate ? minDate : date);\r\n            newDate = (maxDate && newDate > maxDate ? maxDate : newDate);\r\n            return newDate;\r\n        },\r\n\r\n        /* Notify change of month/year. */\r\n        _notifyChange: function (inst) {\r\n            var onChange = this._get(inst, 'onChangeMonthYear');\r\n            if (onChange)\r\n                onChange.apply((inst.input ? inst.input[0] : null),\r\n                    [inst.selectedYear, inst.selectedMonth + 1, inst]);\r\n        },\r\n\r\n        /* Determine the number of months to show. */\r\n        _getNumberOfMonths: function (inst) {\r\n            var numMonths = this._get(inst, 'numberOfMonths');\r\n            return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));\r\n        },\r\n\r\n        /* Determine the current maximum date - ensure no time components are set. */\r\n        _getMinMaxDate: function (inst, minMax) {\r\n            return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);\r\n        },\r\n\r\n        /* Find the number of days in a given month. */\r\n        _getDaysInMonth: function (year, month) {\r\n            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();\r\n        },\r\n\r\n        /* Find the day of the week of the first of a month. */\r\n        _getFirstDayOfMonth: function (year, month) {\r\n            return new Date(year, month, 1).getDay();\r\n        },\r\n\r\n        /* Determines if we should allow a \"next/prev\" month display change. */\r\n        _canAdjustMonth: function (inst, offset, curYear, curMonth) {\r\n            var numMonths = this._getNumberOfMonths(inst);\r\n            var date = this._daylightSavingAdjust(new Date(curYear,\r\n                curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));\r\n            if (offset < 0)\r\n                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));\r\n            return this._isInRange(inst, date);\r\n        },\r\n\r\n        /* Is the given date in the accepted range? */\r\n        _isInRange: function (inst, date) {\r\n            var minDate = this._getMinMaxDate(inst, 'min');\r\n            var maxDate = this._getMinMaxDate(inst, 'max');\r\n            return ((!minDate || date.getTime() >= minDate.getTime()) &&\r\n                (!maxDate || date.getTime() <= maxDate.getTime()));\r\n        },\r\n\r\n        /* Provide the configuration settings for formatting/parsing. */\r\n        _getFormatConfig: function (inst) {\r\n            var shortYearCutoff = this._get(inst, 'shortYearCutoff');\r\n            shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :\r\n                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));\r\n            return {\r\n                shortYearCutoff: shortYearCutoff,\r\n                dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),\r\n                monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')\r\n            };\r\n        },\r\n\r\n        /* Format the given date for display. */\r\n        _formatDate: function (inst, day, month, year) {\r\n            if (!day) {\r\n                inst.currentDay = inst.selectedDay;\r\n                inst.currentMonth = inst.selectedMonth;\r\n                inst.currentYear = inst.selectedYear;\r\n            }\r\n            var date = (day ? (typeof day == 'object' ? day :\r\n                this._daylightSavingAdjust(new Date(year, month, day))) :\r\n                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));\r\n            return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));\r\n        }\r\n    });\r\n\r\n    /*\r\n     * Bind hover events for datepicker elements.\r\n     * Done via delegate so the binding only occurs once in the lifetime of the parent div.\r\n     * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\r\n     */\r\n    function bindHover(dpDiv) {\r\n        var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';\r\n        return dpDiv.delegate(selector, 'mouseout', function () {\r\n            $(this).removeClass('ui-state-hover');\r\n            if (this.className.indexOf('ui-datepicker-prev') != -1) $(this).removeClass('ui-datepicker-prev-hover');\r\n            if (this.className.indexOf('ui-datepicker-next') != -1) $(this).removeClass('ui-datepicker-next-hover');\r\n        })\r\n            .delegate(selector, 'mouseover', function () {\r\n                if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {\r\n                    $(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');\r\n                    $(this).addClass('ui-state-hover');\r\n                    if (this.className.indexOf('ui-datepicker-prev') != -1) $(this).addClass('ui-datepicker-prev-hover');\r\n                    if (this.className.indexOf('ui-datepicker-next') != -1) $(this).addClass('ui-datepicker-next-hover');\r\n                }\r\n            });\r\n    }\r\n\r\n    /* jQuery extend now ignores nulls! */\r\n    function extendRemove(target, props) {\r\n        $.extend(target, props);\r\n        for (var name in props)\r\n            if (props[name] == null || props[name] == undefined)\r\n                target[name] = props[name];\r\n        return target;\r\n    };\r\n\r\n    /* Invoke the datepicker functionality.\r\n       @param  options  string - a command, optionally followed by additional parameters or\r\n                        Object - settings for attaching new datepicker functionality\r\n       @return  jQuery object */\r\n    $.fn.datepicker = function (options) {\r\n\r\n        /* Verify an empty collection wasn't passed - Fixes #6976 */\r\n        if (!this.length) {\r\n            return this;\r\n        }\r\n\r\n        /* Initialise the date picker. */\r\n        if (!$.datepicker.initialized) {\r\n            $(document).mousedown($.datepicker._checkExternalClick).\r\n                find(document.body).append($.datepicker.dpDiv);\r\n            $.datepicker.initialized = true;\r\n        }\r\n\r\n        var otherArgs = Array.prototype.slice.call(arguments, 1);\r\n        if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))\r\n            return $.datepicker['_' + options + 'Datepicker'].\r\n                apply($.datepicker, [this[0]].concat(otherArgs));\r\n        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')\r\n            return $.datepicker['_' + options + 'Datepicker'].\r\n                apply($.datepicker, [this[0]].concat(otherArgs));\r\n        return this.each(function () {\r\n            typeof options == 'string' ?\r\n                $.datepicker['_' + options + 'Datepicker'].\r\n                    apply($.datepicker, [this].concat(otherArgs)) :\r\n                $.datepicker._attachDatepicker(this, options);\r\n        });\r\n    };\r\n\r\n    $.datepicker = new Datepicker(); // singleton instance\r\n    $.datepicker.initialized = false;\r\n    $.datepicker.uuid = new Date().getTime();\r\n    $.datepicker.version = \"1.9.0\";\r\n\r\n    // Workaround for #4055\r\n    // Add another global to avoid noConflict issues with inline event handlers\r\n    window['DP_jQuery_' + dpuuid] = $;\r\n\r\n})(jQuery);\n\n//# sourceURL=webpack:///./src/js/jquery-ui.datepicker.js?");

/***/ })

/******/ });